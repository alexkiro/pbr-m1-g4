package pbr.m1.g4;

import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import pbr.m1.g4.services.Services;
import pbr.m1.g4.services.XMLFactory;

/**
 *
 * @author Alin
 */
public class Interface extends javax.swing.JFrame {

    final JFileChooser fc = new JFileChooser();

    final String DIRNAME = "INPUTXML";
    
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MenuPanel = new javax.swing.JTabbedPane();
        TextPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        ParseProgressBar = new javax.swing.JProgressBar();
        ParseButton = new javax.swing.JButton();
        TextFromFilePanel = new javax.swing.JPanel();
        LoadButton = new javax.swing.JButton();
        FileLocation = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TextAreaFromFile = new javax.swing.JTextArea();
        ParseFromFileProgressBar = new javax.swing.JProgressBar();
        ParseFromFileButton = new javax.swing.JButton();
        MainMenu = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        ItemClose = new javax.swing.JMenuItem();
        MenuAbout = new javax.swing.JMenu();
        ItemHelp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 204, 204));
        setName("Meniu"); // NOI18N

        MenuPanel.setBackground(new java.awt.Color(0, 204, 204));

        TextArea.setColumns(20);
        TextArea.setRows(5);
        TextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(TextArea);

        ParseButton.setText("Parse Text");
        ParseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TextPanelLayout = new javax.swing.GroupLayout(TextPanel);
        TextPanel.setLayout(TextPanelLayout);
        TextPanelLayout.setHorizontalGroup(
            TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TextPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(ParseProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(TextPanelLayout.createSequentialGroup()
                        .addComponent(ParseButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        TextPanelLayout.setVerticalGroup(
            TextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TextPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ParseProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ParseButton)
                .addGap(27, 27, 27))
        );

        MenuPanel.addTab("Parse ", TextPanel);

        LoadButton.setText("Load File");
        LoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadButtonActionPerformed(evt);
            }
        });

        TextAreaFromFile.setColumns(20);
        TextAreaFromFile.setRows(5);
        jScrollPane2.setViewportView(TextAreaFromFile);

        ParseFromFileButton.setText("Parse Text");
        ParseFromFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseFromFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout TextFromFilePanelLayout = new javax.swing.GroupLayout(TextFromFilePanel);
        TextFromFilePanel.setLayout(TextFromFilePanelLayout);
        TextFromFilePanelLayout.setHorizontalGroup(
            TextFromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TextFromFilePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TextFromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TextFromFilePanelLayout.createSequentialGroup()
                        .addComponent(FileLocation)
                        .addGap(18, 18, 18)
                        .addComponent(LoadButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                    .addComponent(ParseFromFileProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(TextFromFilePanelLayout.createSequentialGroup()
                        .addComponent(ParseFromFileButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        TextFromFilePanelLayout.setVerticalGroup(
            TextFromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TextFromFilePanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(TextFromFilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FileLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ParseFromFileProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ParseFromFileButton)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        MenuPanel.addTab("Parse From File", TextFromFilePanel);

        MainMenu.setBackground(new java.awt.Color(255, 255, 255));

        MenuFile.setText("File");
        MenuFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuFileMouseClicked(evt);
            }
        });

        ItemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        ItemClose.setText("Close");
        ItemClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemCloseMouseClicked(evt);
            }
        });
        ItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemCloseActionPerformed(evt);
            }
        });
        MenuFile.add(ItemClose);

        MainMenu.add(MenuFile);

        MenuAbout.setText("About");

        ItemHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        ItemHelp.setText("Help");
        ItemHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItemHelpMouseClicked(evt);
            }
        });
        ItemHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemHelpActionPerformed(evt);
            }
        });
        MenuAbout.add(ItemHelp);

        MainMenu.add(MenuAbout);

        setJMenuBar(MainMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MenuPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MenuPanel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuFileMouseClicked
    }//GEN-LAST:event_MenuFileMouseClicked

    private void ItemCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemCloseMouseClicked
    }//GEN-LAST:event_ItemCloseMouseClicked

    private void ItemHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemHelpMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ItemHelpMouseClicked

    private void ItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ItemCloseActionPerformed

    private void LoadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadButtonActionPerformed
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea
                FileLocation.setText(file.getAbsolutePath());
                TextAreaFromFile.read(new FileReader(file.getAbsolutePath()), null);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Problem accessing file" + file.getAbsolutePath(), "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_LoadButtonActionPerformed
    
    private void ParseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseButtonActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                startProgressBar();
                String str = TextArea.getText();
                TextArea.setText("");
                parseText(str);
                stopProgressBar();
            }
        }).start();
    }//GEN-LAST:event_ParseButtonActionPerformed

    private void ParseFromFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseFromFileButtonActionPerformed
        new Thread(new Runnable() {
            @Override
            public void run() {
                startProgressBar();
                String str = TextAreaFromFile.getText();
                TextAreaFromFile.setText("");
                parseText(str);
                stopProgressBar();
            }
        }).start();
    }//GEN-LAST:event_ParseFromFileButtonActionPerformed

    public void parseText(String input){
        if (input.isEmpty()){
            return;
        }
        String xml = Services.chunkText(input);
        try {
            File dir = new File(DIRNAME);
            if (!(dir.getCanonicalFile().exists() && dir.getCanonicalFile().isDirectory())) {
                dir.mkdir();
            }
            String[] result = {Services.chunkText(input)};
            XMLFactory.init(getUniqueName(), result);                       
        } catch (IOException ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Returns unique file name using the UNIX millisecond timestamp
     * @return 
     */
    public synchronized String getUniqueName(){
        return DIRNAME + "/" + System.currentTimeMillis() + ".xml";
    }
    
    public void openWebpage(URI uri) {
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(uri);
            } catch (Exception ex) {
                Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void ItemHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemHelpActionPerformed
        openWebpage(new File("help/index.html").toURI());
    }//GEN-LAST:event_ItemHelpActionPerformed

    private void startProgressBar() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ParseProgressBar.setIndeterminate(true);
                ParseFromFileProgressBar.setIndeterminate(true);
            }
        });
    }

    private void stopProgressBar() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                ParseProgressBar.setIndeterminate(false);
                ParseFromFileProgressBar.setIndeterminate(false);
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Interface interf = new Interface();
                interf.setVisible(true);
                interf.TextPanel.setBackground(new Color(34, 58, 89));
                interf.TextFromFilePanel.setBackground(new Color(34, 58, 89));
                interf.ParseButton.setBackground(new Color(75, 83, 93));
                interf.ParseButton.setForeground(Color.white);
                interf.LoadButton.setBackground(new Color(75, 83, 93));
                interf.LoadButton.setForeground(Color.white);
                interf.ParseFromFileButton.setBackground(new Color(75, 83, 93));
                interf.ParseFromFileButton.setForeground(Color.white);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FileLocation;
    private javax.swing.JMenuItem ItemClose;
    private javax.swing.JMenuItem ItemHelp;
    private javax.swing.JButton LoadButton;
    private javax.swing.JMenuBar MainMenu;
    private javax.swing.JMenu MenuAbout;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JTabbedPane MenuPanel;
    private javax.swing.JButton ParseButton;
    private javax.swing.JButton ParseFromFileButton;
    private javax.swing.JProgressBar ParseFromFileProgressBar;
    private javax.swing.JProgressBar ParseProgressBar;
    private javax.swing.JTextArea TextArea;
    private javax.swing.JTextArea TextAreaFromFile;
    private javax.swing.JPanel TextFromFilePanel;
    private javax.swing.JPanel TextPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
